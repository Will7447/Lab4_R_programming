},
pred = function(){
return(y_hat)
},
coef = function(){
vec_coef = as.vector(beta_hat)
names(vec_coef) = row.names(beta_hat)
return(vec_coef)
},
summary = function(){
coe_mat = cbind(beta_hat,sqrt(diag(var_beta_hat)),t_beta,p_value)
colnames(coe_mat) <- c('Estimate','Std. Error','t value','Pr(>|t|)','')
for(a in 1:ncol(X)){
coe_mat[a,5]<-"***"
}
cat('Coefficients:\n')
base::print(coe_mat)
cat(paste0('\nResidual standard error: ',sqrt(sigma_hat_2),' on ',d_f,' degrees of freedom'))
}
)
)
linreg_mod <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
linreg_mod$summary()
library(lab4package)
linreg <- setRefClass('linreg',
fields = list(beta_hat='matrix',
X='matrix',
y='numeric',
y_hat='matrix',
e_hat='matrix',
d_f='numeric',
sigma_hat_2='numeric',
var_beta_hat='matrix',
t_beta='matrix',
p_value='matrix',
for_mula='formula',
data='data.frame',
df_name='character'),
methods = list(
initialize = function(for_mula,data){
stopifnot(plyr::is.formula(for_mula),is.data.frame(data))
for_mula <<- for_mula
data <<- data
df_name <<- deparse(substitute(data))
X <<- model.matrix(for_mula,data)
y <<- data[,all.vars(for_mula)[1]]
beta_hat <<- solve(t(X)%*%X)%*%t(X)%*%y
y_hat <<- X%*%beta_hat
e_hat <<- y-y_hat
d_f <<- length(y)-length(all.vars(for_mula))
sigma_hat_2 <<- (t(e_hat)%*%e_hat)[1,1]/d_f
var_beta_hat <<- sigma_hat_2*solve(t(X)%*%X)
t_beta <<- beta_hat/sqrt(diag(var_beta_hat))
p_value <<- 2*pt(abs(t_beta),df = d_f,lower.tail = FALSE)
},
print = function(){
cat('Call:\n')
cat(paste0('linreg(formula = ',deparse(for_mula),', data = ',df_name,')\n'))
cat('\nCoefficients:\n')
base::print(beta_hat[,1])
},
plot = function(){
library(ggplot2)
index <- 1:length(y)
plot_data <- data.frame(index, y_hat, e_hat, sqrt(abs(e_hat/sd(e_hat))))
plot_data$label <- ifelse(plot_data$index %in% c(99, 118, 119), as.character(plot_data$index), "")
p1 <- ggplot(plot_data, aes(x = y_hat, y = e_hat)) +
geom_point(size = 3.5, shape = 1, stroke = 1) +
geom_text(aes(label = label), hjust = 1.5, vjust = 0) +
theme_test()+
labs(x = paste0("Fitted values\nlinreg(",deparse(for_mula),')'), y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme(plot.title = element_text(hjust = 0.5))+
geom_hline(yintercept = 0, color = "grey", linetype = "dotted")+
stat_summary(geom = "line", color = "red", fun = median)
p2 <- ggplot(plot_data, aes(x = y_hat, y = sqrt(abs(e_hat/sd(e_hat))))) +
geom_point(size = 3.5, shape = 1, stroke = 1) +
geom_text(aes(label = label), hjust = 1.5, vjust = 0) +
theme_test()+
labs(x = paste0("Fitted values\nlinreg(",deparse(for_mula),')'), y = expression(sqrt(abs("Standardized residuals")))) +
ggtitle("Scale−Location") +
theme(plot.title = element_text(hjust = 0.5))+
stat_summary(geom = "line", color = "red", fun = median)
p1
p2
},
resid = function(){
return(e_hat)
},
pred = function(){
return(y_hat)
},
coef = function(){
vec_coef = as.vector(beta_hat)
names(vec_coef) = row.names(beta_hat)
return(vec_coef)
},
summary = function(){
coe_mat = cbind(beta_hat,sqrt(diag(var_beta_hat)),t_beta,p_value)
colnames(coe_mat) <- c('Estimate','Std. Error','t value','Pr(>|t|)','')
for(a in 1:ncol(X)){
coe_mat[a,5]<-"***"
}
cat('Coefficients:\n')
base::print(coe_mat)
cat(paste0('\nResidual standard error: ',sqrt(sigma_hat_2),' on ',d_f,' degrees of freedom'))
}
)
)
linreg_mod <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
linreg_mod$summary()
linreg <- setRefClass('linreg',
fields = list(beta_hat='matrix',
X='matrix',
y='numeric',
y_hat='matrix',
e_hat='matrix',
d_f='numeric',
sigma_hat_2='numeric',
var_beta_hat='matrix',
t_beta='matrix',
p_value='matrix',
for_mula='formula',
data='data.frame',
df_name='character'),
methods = list(
initialize = function(for_mula,data){
stopifnot(plyr::is.formula(for_mula),is.data.frame(data))
for_mula <<- for_mula
data <<- data
df_name <<- deparse(substitute(data))
X <<- model.matrix(for_mula,data)
y <<- data[,all.vars(for_mula)[1]]
beta_hat <<- solve(t(X)%*%X)%*%t(X)%*%y
y_hat <<- X%*%beta_hat
e_hat <<- y-y_hat
d_f <<- length(y)-length(all.vars(for_mula))
sigma_hat_2 <<- (t(e_hat)%*%e_hat)[1,1]/d_f
var_beta_hat <<- sigma_hat_2*solve(t(X)%*%X)
t_beta <<- beta_hat/sqrt(diag(var_beta_hat))
p_value <<- 2*pt(abs(t_beta),df = d_f,lower.tail = FALSE)
},
print = function(){
cat('Call:\n')
cat(paste0('linreg(formula = ',deparse(for_mula),', data = ',df_name,')\n'))
cat('\nCoefficients:\n')
base::print(beta_hat[,1])
},
plot = function(){
library(ggplot2)
index <- 1:length(y)
plot_data <- data.frame(index, y_hat, e_hat, sqrt(abs(e_hat/sd(e_hat))))
plot_data$label <- ifelse(plot_data$index %in% c(99, 118, 119), as.character(plot_data$index), "")
p1 <- ggplot(plot_data, aes(x = y_hat, y = e_hat)) +
geom_point(size = 3.5, shape = 1, stroke = 1) +
geom_text(aes(label = label), hjust = 1.5, vjust = 0) +
theme_test()+
labs(x = paste0("Fitted values\nlinreg(",deparse(for_mula),')'), y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme(plot.title = element_text(hjust = 0.5))+
geom_hline(yintercept = 0, color = "grey", linetype = "dotted")+
stat_summary(geom = "line", color = "red", fun = median)
p2 <- ggplot(plot_data, aes(x = y_hat, y = sqrt(abs(e_hat/sd(e_hat))))) +
geom_point(size = 3.5, shape = 1, stroke = 1) +
geom_text(aes(label = label), hjust = 1.5, vjust = 0) +
theme_test()+
labs(x = paste0("Fitted values\nlinreg(",deparse(for_mula),')'), y = expression(sqrt(abs("Standardized residuals")))) +
ggtitle("Scale−Location") +
theme(plot.title = element_text(hjust = 0.5))+
stat_summary(geom = "line", color = "red", fun = median)
p1
p2
},
resid = function(){
return(e_hat)
},
pred = function(){
return(y_hat)
},
coef = function(){
vec_coef = as.vector(beta_hat)
names(vec_coef) = row.names(beta_hat)
return(vec_coef)
},
summary = function(){
coe_mat = cbind(beta_hat,sqrt(diag(var_beta_hat)),t_beta,p_value)
for(a in 1:ncol(X)){
coe_mat[a,5]<-"***"
}
colnames(coe_mat) <- c('Estimate','Std. Error','t value','Pr(>|t|)','')
cat('Coefficients:\n')
base::print(coe_mat)
cat(paste0('\nResidual standard error: ',sqrt(sigma_hat_2),' on ',d_f,' degrees of freedom'))
}
)
)
linreg_mod <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
linreg_mod$summary()
linreg_mod$beta_hat
class(linreg_mod$beta_hat)
linreg_mod$t_beta
a <- cbind(linreg_mod$beta_hat,linreg_mod$t_beta)
a
class(a)
b <- as.data.frame(a)
b
a <- as.data.frame(linreg_mod$beta_hat,linreg_mod$t_beta)
a
library(lab4package)
a <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
a$summary()
coe_mat = cbind(a$beta_hat,a$t_beta,a$p_value)
coe_mat
class(coe_mat)
coe_mat <- as.data.frame(coe_mat)
coe_mat
for(a in 1:3{
for(a in 1:3){
coe_mat[a,5]<-"***"
}
coe_mat[1,4] <- '***'
coe_mat
coe_mat[2,4] <- '***'
coe_mat
library(lab4package)
a <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
a$summary()
a$beta_hat
a$t_beta
class(a$t_beta)
a$X
ncol(a$X)
a <- matrix(rep("***", 3), col = 1)
a <- matrix(rep("***", 3), ncol = 1)
a
coe_mat = cbind(a$beta_hat,a$t_beta,a)
b <- matrix(rep("***", 3), ncol = 1)
b
coe_mat = cbind(a$beta_hat,a$t_beta,b)
d <- a$beta_hat
a <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
coe_mat = cbind(a$beta_hat,a$t_beta,b)
coe_mat
library(lab4package)
a <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
a$summary()
linreg <- setRefClass('linreg',
fields = list(beta_hat='matrix',
X='matrix',
y='numeric',
y_hat='matrix',
e_hat='matrix',
d_f='numeric',
sigma_hat_2='numeric',
var_beta_hat='matrix',
t_beta='matrix',
p_value='matrix',
for_mula='formula',
data='data.frame',
df_name='character'),
methods = list(
initialize = function(for_mula,data){
stopifnot(plyr::is.formula(for_mula),is.data.frame(data))
for_mula <<- for_mula
data <<- data
df_name <<- deparse(substitute(data))
X <<- model.matrix(for_mula,data)
y <<- data[,all.vars(for_mula)[1]]
beta_hat <<- solve(t(X)%*%X)%*%t(X)%*%y
y_hat <<- X%*%beta_hat
e_hat <<- y-y_hat
d_f <<- length(y)-length(all.vars(for_mula))
sigma_hat_2 <<- (t(e_hat)%*%e_hat)[1,1]/d_f
var_beta_hat <<- sigma_hat_2*solve(t(X)%*%X)
t_beta <<- beta_hat/sqrt(diag(var_beta_hat))
p_value <<- 2*pt(abs(t_beta),df = d_f,lower.tail = FALSE)
},
print = function(){
cat('Call:\n')
cat(paste0('linreg(formula = ',deparse(for_mula),', data = ',df_name,')\n'))
cat('\nCoefficients:\n')
base::print(beta_hat[,1])
},
plot = function(){
library(ggplot2)
index <- 1:length(y)
plot_data <- data.frame(index, y_hat, e_hat, sqrt(abs(e_hat/sd(e_hat))))
plot_data$label <- ifelse(plot_data$index %in% c(99, 118, 119), as.character(plot_data$index), "")
p1 <- ggplot(plot_data, aes(x = y_hat, y = e_hat)) +
geom_point(size = 3.5, shape = 1, stroke = 1) +
geom_text(aes(label = label), hjust = 1.5, vjust = 0) +
theme_test()+
labs(x = paste0("Fitted values\nlinreg(",deparse(for_mula),')'), y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme(plot.title = element_text(hjust = 0.5))+
geom_hline(yintercept = 0, color = "grey", linetype = "dotted")+
stat_summary(geom = "line", color = "red", fun = median)
p2 <- ggplot(plot_data, aes(x = y_hat, y = sqrt(abs(e_hat/sd(e_hat))))) +
geom_point(size = 3.5, shape = 1, stroke = 1) +
geom_text(aes(label = label), hjust = 1.5, vjust = 0) +
theme_test()+
labs(x = paste0("Fitted values\nlinreg(",deparse(for_mula),')'), y = expression(sqrt(abs("Standardized residuals")))) +
ggtitle("Scale−Location") +
theme(plot.title = element_text(hjust = 0.5))+
stat_summary(geom = "line", color = "red", fun = median)
p1
p2
},
resid = function(){
return(e_hat)
},
pred = function(){
return(y_hat)
},
coef = function(){
vec_coef = as.vector(beta_hat)
names(vec_coef) = row.names(beta_hat)
return(vec_coef)
},
summary = function(){
a <- matrix(rep("***", ncol(X)), ncol = 1)
coe_mat = cbind(beta_hat,sqrt(diag(var_beta_hat)),t_beta,p_value,a)
#coe_mat <- as.data.frame(coe_mat)
colnames(coe_mat) <- c('Estimate','Std. Error','t value','Pr(>|t|)','')
cat('Coefficients:\n')
base::print(coe_mat)
cat(paste0('\nResidual standard error: ',sqrt(sigma_hat_2),' on ',d_f,' degrees of freedom'))
}
)
)
b <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
b$summary()
linreg <- setRefClass('linreg',
fields = list(beta_hat='matrix',
X='matrix',
y='numeric',
y_hat='matrix',
e_hat='matrix',
d_f='numeric',
sigma_hat_2='numeric',
var_beta_hat='matrix',
t_beta='matrix',
p_value='matrix',
for_mula='formula',
data='data.frame',
df_name='character'),
methods = list(
initialize = function(for_mula,data){
stopifnot(plyr::is.formula(for_mula),is.data.frame(data))
for_mula <<- for_mula
data <<- data
df_name <<- deparse(substitute(data))
X <<- model.matrix(for_mula,data)
y <<- data[,all.vars(for_mula)[1]]
beta_hat <<- solve(t(X)%*%X)%*%t(X)%*%y
y_hat <<- X%*%beta_hat
e_hat <<- y-y_hat
d_f <<- length(y)-length(all.vars(for_mula))
sigma_hat_2 <<- (t(e_hat)%*%e_hat)[1,1]/d_f
var_beta_hat <<- sigma_hat_2*solve(t(X)%*%X)
t_beta <<- beta_hat/sqrt(diag(var_beta_hat))
p_value <<- 2*pt(abs(t_beta),df = d_f,lower.tail = FALSE)
},
print = function(){
cat('Call:\n')
cat(paste0('linreg(formula = ',deparse(for_mula),', data = ',df_name,')\n'))
cat('\nCoefficients:\n')
base::print(beta_hat[,1])
},
plot = function(){
library(ggplot2)
index <- 1:length(y)
plot_data <- data.frame(index, y_hat, e_hat, sqrt(abs(e_hat/sd(e_hat))))
plot_data$label <- ifelse(plot_data$index %in% c(99, 118, 119), as.character(plot_data$index), "")
p1 <- ggplot(plot_data, aes(x = y_hat, y = e_hat)) +
geom_point(size = 3.5, shape = 1, stroke = 1) +
geom_text(aes(label = label), hjust = 1.5, vjust = 0) +
theme_test()+
labs(x = paste0("Fitted values\nlinreg(",deparse(for_mula),')'), y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme(plot.title = element_text(hjust = 0.5))+
geom_hline(yintercept = 0, color = "grey", linetype = "dotted")+
stat_summary(geom = "line", color = "red", fun = median)
p2 <- ggplot(plot_data, aes(x = y_hat, y = sqrt(abs(e_hat/sd(e_hat))))) +
geom_point(size = 3.5, shape = 1, stroke = 1) +
geom_text(aes(label = label), hjust = 1.5, vjust = 0) +
theme_test()+
labs(x = paste0("Fitted values\nlinreg(",deparse(for_mula),')'), y = expression(sqrt(abs("Standardized residuals")))) +
ggtitle("Scale−Location") +
theme(plot.title = element_text(hjust = 0.5))+
stat_summary(geom = "line", color = "red", fun = median)
p1
p2
},
resid = function(){
return(e_hat)
},
pred = function(){
return(y_hat)
},
coef = function(){
vec_coef = as.vector(beta_hat)
names(vec_coef) = row.names(beta_hat)
return(vec_coef)
},
summary = function(){
a <- matrix(rep("***", ncol(X)), ncol = 1)
coe_mat = cbind(beta_hat,sqrt(diag(var_beta_hat)),t_beta,p_value,a)
coe_mat <- as.data.frame(coe_mat)
colnames(coe_mat) <- c('Estimate','Std. Error','t value','Pr(>|t|)','')
cat('Coefficients:\n')
base::print(coe_mat)
cat(paste0('\nResidual standard error: ',round(sqrt(sigma_hat_2),3),' on ',d_f,' degrees of freedom'))
}
)
)
b <- linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)
b$summary()
usethis::use github action check standard()
usethis::use_github_action_check_standard()
# Read the content of the R file into a character vector
file_content <- readLines("lab4.R")
# Read the content of the R file into a character vector
file_content <- readLines("lab4")
# Read the content of the R file into a character vector
file_content <- readLines("/R/lab4.R")
# Read the content of the R file into a character vector
file_content <- readLines("R/lab4.R")
# Read the content of the R file into a character vector
file_content <- readLines("./R/lab4.R")
# Read the content of the R file into a character vector
file_content <- readLines("lab4.R")
getwd()
# Read the content of the R file into a character vector
file_content <- readLines("/R/lab4.R")
# Read the content of the R file into a character vector
file_content <- readLines("R/lab4.R")
# Read the content of the R file into a character vector
file_content <- readLines("R/lab4.R")
# Define a regular expression pattern to match non-ASCII characters
non_ascii_pattern <- "[^\x00-\x7F]"
# Define a regular expression pattern to match non-ASCII characters
non_ascii_pattern <- "[^\x00-\x7F]"
# Define a regular expression pattern to match non-ASCII characters
non_ascii_pattern <- "[^\x00-\x7F]"
# Read the content of the R file into a character vector
file_content <- readLines("R/lab4.R")
# Define a regular expression pattern to match non-ASCII characters using Unicode escape sequences
non_ascii_pattern <- "[^\x{0000}-\x{007F}]"
# Define a regular expression pattern to match non-ASCII characters using Unicode escape sequences
non_ascii_pattern <- "[^\x{0000}-\x{007F}]"
# Define a regular expression pattern to match non-ASCII characters using Unicode escape sequences
non_ascii_pattern <- "[^\\u0000-\\u007F]"
# Find non-ASCII characters in the file content
non_ascii_characters <- grep(non_ascii_pattern, file_content, value = TRUE, perl = TRUE)
non_ascii_characters <- grep(non_ascii_pattern, file_content, value = TRUE, perl = TRUE)
# Define a regular expression pattern to match non-ASCII characters using Unicode escape sequences
non_ascii_pattern <- "[^\\p{ASCII}]"
non_ascii_characters <- grep(non_ascii_pattern, file_content, value = TRUE, perl = TRUE)
# Print the non-ASCII characters found in the file
print(non_ascii_characters)
for (k in 1:100){
repeat {
if (k%%2==0){k=k/2} else {k =3*k +1}
if (k==1){break}
}
print(k)
}
i <- 1
for (k in 1:100){
repeat {
if (k%%2==0){k=k/2} else {k =3*k +1}
if (k==1){break}
}
print(i)
i <- i+1
}
for (k in 1:1000){
repeat {
if (k%%2==0){k=k/2} else {k =3*k +1}
if (k==1){break}
}
print(i)
i <- i+1
}
i <- 1
for (k in 1:1000){
repeat {
if (k%%2==0){k=k/2} else {k =3*k +1}
if (k==1){break}
}
print(i)
i <- i+1
}
i <- 1
for (k in 1:10000){
repeat {
if (k%%2==0){k=k/2} else {k =3*k +1}
if (k==1){break}
}
print(i)
i <- i+1
}
i <- 1
for (k in 1:100000){
repeat {
if (k%%2==0){k=k/2} else {k =3*k +1}
if (k==1){break}
}
print(i)
i <- i+1
}
